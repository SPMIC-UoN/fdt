#!/bin/sh

#   Copyright (C) 2004,2013 University of Oxford
#
#   SHCOPYRIGHT

Usage() {
    echo ""
    echo "Usage: bedpostx <subject directory> [options]"
    echo ""
    echo "expects to find bvals and bvecs in subject directory"
    echo "expects to find data and nodif_brain_mask in subject directory"
#   echo "expects to find grad_dev in subject directory, if -g is set"
    echo "options (old syntax)"
    echo "-n (number of fibres per voxel, default 2)"
    echo "-w (ARD weight, more weight means less secondary fibres per voxel, default 1)"
    echo "-b (burnin period, default 1000)"
    echo "-j (number of jumps, default 1250)"
    echo "-s (sample every, default 25)"
    echo "-model (1 for monoexponential, 2 for multiexponential, default 1)"
#   echo "-g (consider gradient nonlinearities, default off)"
	echo "-c do not use CUDA capable hardware/queue (if found)"
    echo ""
    echo ""
    echo "ALTERNATIVELY: you can pass on xfibres options onto directly bedpostx"
    echo " For example:  bedpostx <subject directory> --noard --cnonlinear"
    echo " Type 'xfibres --help' for a list of available options "
    echo " Default options will be bedpostx default (see above), and not xfibres default."
    echo ""
    echo "Note: Use EITHER old OR new syntax."
    exit 1
}

make_absolute(){
    dir=$1;
    if [ -d ${dir} ]; then
	OLDWD=`pwd`
	cd ${dir}
	dir_all=`pwd`
	cd $OLDWD
    else
	dir_all=${dir}
    fi
    echo ${dir_all}
}

[ "$1" = "" ] && Usage

myopts="$@"
subjdir=`make_absolute $1`
subjdir=`echo $subjdir | sed 's/\/$/$/g'`

echo subjectdir is $subjdir

#parse option arguments
nfibres=2
fudge=1
burnin=1000
njumps=1250
sampleevery=25
model=1
gflag=0
nocuda=0

shift
while [ ! -z "$1" ]
do
  case "$1" in
      -n) nfibres=$2;shift;;
      -w) fudge=$2;shift;;
      -b) burnin=$2;shift;;
      -j) njumps=$2;shift;;
      -s) sampleevery=$2;shift;;
      -model) model=$2;shift;;
      -g) gflag=1;;
      -c) nocuda=1;;
      *) break;;
  esac
  shift
done
opts="--nf=$nfibres --fudge=$fudge --bi=$burnin --nj=$njumps --se=$sampleevery --model=$model"
defopts="--cnonlinear"
opts="$opts $defopts $*"
if [ -n "$SGE_ROOT" ]; then
	# Look for an SGE queue
	if [ -n $FSLGECUDAQ -a $nocuda -eq 0 ]; then
		# Test that the queue exists
		qconf -sq $FSLGECUDAQ 2>&1 >/dev/null
		if [ $? -eq 0 ]; then
			# CUDA queue exists
			if [ -x $0_gpu ]; then
				exec $0_gpu $myopts
			fi
		fi
	fi
fi


#check that all required files exist

if [ ! -d $subjdir ]; then
	echo "subject directory $1 not found"
	exit 1
fi

if [ ! -e ${subjdir}/bvecs ]; then
	echo "${subjdir}/bvecs not found"
	exit 1
fi

if [ ! -e ${subjdir}/bvals ]; then
	echo "${subjdir}/bvals not found"
	exit 1
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/data` -eq 0 ]; then
	echo "${subjdir}/data not found"
	exit 1
fi

if [ ${gflag} -eq 1 ]; then
    if [ `${FSLDIR}/bin/imtest ${subjdir}/grad_dev` -eq 0 ]; then
	echo "${subjdir}/grad_dev not found"
	exit 1
    fi
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/nodif_brain_mask` -eq 0 ]; then
	echo "${subjdir}/nodif_brain_mask not found"
	exit 1
fi

echo Making bedpostx directory structure

mkdir -p ${subjdir}.bedpostX/
mkdir -p ${subjdir}.bedpostX/diff_slices
mkdir -p ${subjdir}.bedpostX/logs
mkdir -p ${subjdir}.bedpostX/logs/pid_${$}
mkdir -p ${subjdir}.bedpostX/xfms

mailto=`whoami`@fmrib.ox.ac.uk
echo Queuing preprocessing stages
preprocid=`${FSLDIR}/bin/fsl_sub -T 60 -m as -N bpx_preproc -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc.sh ${subjdir} ${gflag}`

echo Queuing parallel processing stage
nslices=`${FSLDIR}/bin/fslval ${subjdir}/data dim3`
[ -f ${subjdir}.bedpostX/commands.txt ] && rm ${subjdir}.bedpostX/commands.txt
if [ "x$SGE_ROOT" = "x" ]; then

# 
# Need to set off a backgrounded monitoring task
# 
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
finished=0
logdir=${subjdir}.bedpostX/logs
trap 'exit 0' USR1

check() {
    if [ \$finished -eq 1 ];then
        echo "\$nfin slices processed"
    else
        nfin=0
        slice=0
        while [ "\$slice" -le $nslices ];do
            slicezp=\`\$FSLDIR/bin/zeropad \$slice 4\`
            isimg=\`\$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_\$slicezp/dyads1\`
            if [ \$isimg -eq 1 ];then
                nfin=\$((\$nfin + 1))
            fi
                slice=\$((\$slice + 1))
        done
        if [ \$nfin -eq $nslices ] ; then
            finished=1
        fi
        echo "\$nfin slices processed"
    fi
}
exit_test() {
    isimg=\`\$FSLDIR/bin/imtest ${subjdir}.bedpostX/dyads1\`
    if [ \$isimg -eq 0 ] ; then
	echo For some reason the bedpostX process DOES NOT appear
	echo to have successfully completed. Please examine your
	echo results carefully.
    else
	echo All slices processed
    fi
}

check
n=0
while [ \$finished -eq 0 ] ; do
    sleep 10
    if [ \$n -eq 60 ] ; then
        check
        n=0
    else
        n=\$((\$n + 1))
    fi
done
exit_test
EOM
    chmod +x ${subjdir}.bedpostX/monitor
    ${subjdir}.bedpostX/monitor&
    monitorpid=$!
fi
slice=0
while [ $slice -lt $nslices ]
do
    slicezp=`$FSLDIR/bin/zeropad $slice 4`
    if [ `$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_$slicezp/dyads1` -eq 1 ];then
	echo "slice $slice has already been processed"
    else
	if [ ${gflag} -eq 1 ]; then
	    gopts="$opts --gradnonlin=${subjdir}/grad_dev_slice_${slicezp}"
	else
	    gopts=$opts
	fi    
	echo "${FSLDIR}/bin/bedpostx_single_slice.sh ${subjdir} ${slice} $gopts" \
	    >> ${subjdir}.bedpostX/commands.txt
    fi
    slice=$(($slice + 1))
done

bedpostid=`${FSLDIR}/bin/fsl_sub -j $preprocid -l ${subjdir}.bedpostX/logs -M $mailto -N bedpostx -t ${subjdir}.bedpostX/commands.txt`

echo Queuing post processing stage
mergeid=`${FSLDIR}/bin/fsl_sub -j $bedpostid -T 60 -m as -N bpx_postproc -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_postproc.sh $subjdir`

[ "x$SGE_ROOT" = "x" ] && kill -USR1 $monitorpid
if [ "x$SGE_ROOT" != "x" ]; then
    echo
    echo Type ${subjdir}.bedpostX/monitor to show progress.
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
finished=0
logdir=${subjdir}.bedpostX/logs
while [ \$finished -eq 0 ] ; do
    nfin=0
    slice=0
    while [ "\$slice" -le $nslices ];do
        slicezp=\`\$FSLDIR/bin/zeropad \$slice 4\`
        isimg=\`\$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_\$slicezp/dyads1\`
        if [ \$isimg -eq 1 ];then
          nfin=\$((\$nfin + 1))
        fi
        slice=\$((\$slice + 1))
    done
    echo "\$nfin slices processed"

    if [ -f ${subjdir}.bedpostX/xfms/eye.mat ] ; then
        finished=1
        echo "All slices processed"
    fi

    sleep 600;
done
EOM
    chmod +x ${subjdir}.bedpostX/monitor

    echo Type ${subjdir}.bedpostX/cancel to terminate all the queued tasks.
    cat <<EOC > ${subjdir}.bedpostX/cancel
#!/bin/sh
qdel $mergeid $bedpostid $preprocid
EOC
    chmod +x ${subjdir}.bedpostX/cancel

    echo
    echo You will get an email at the end of the post-processing stage.
    echo
fi
